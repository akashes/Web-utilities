const exportUsersPdf=async(req,res)=>{
    try {
       const users=  await User.find({isAdmin:0})
       const data ={
        userList:users
       }
    const filePathName=   path.resolve(__dirname,'../views/admin/htmltopdf.ejs')
   const htmlString= fs.readFileSync(filePathName).toString()
  let options={
    format:'Letter'
  }
   const ejsData= ejs.render(htmlString,data)
   pdf.create(ejsData,options).toFile('users.pdf',(err,response)=>{
    if(err) console.log(err)

       const filePath= path.resolve(__dirname,'../users.pdf')
       fs.readFile(filePath,(err,file)=>{
        if(err){
            console.log(err)
            return res.status(500).send("Could not download file")
        }

        res.setHeader('Content-Type','application/pdf')
        res.setHeader('Content-Disposition','attachment;filename="users.pdf"')

        res.send(file)

       })
    
   })
    } catch (error) {
        console.log(error)
    }

}
///htmlToPdf.ejs
<h1>Users List</h1>



<table width="100%" cellspacing="30" >
  <tr>
    <th>Name</th>
    <th>Email</th>
    <th>Image</th>
    <th>Verified</th>
  </tr>

  <% 
  if(userList.length>0){
    for(let i = 0; i < userList.length; i++) { %>
        <tr>
            <td>
                <%= userList[i].username %>
            </td>
            <td>
                <%= userList[i].email %>
            </td>
            <td>
                <img width="50px" height="50px" style="object-fit: cover;" src="http://127.0.0.1:8080/<%= userList[i].avatar %>" alt="">
                
            </td>
            <td>
                <% if(userList[i].isVerified) {
                    %>
     
                    <span>Yes</span>
    
                    <%
                }else{
                    %>
                    <span>No</span>
                    <%
                }
    
                     %>
            </td>
           
        </tr>
      <% }

  }else{
    %>
    <tr>
        <td colspan="4">
            Users not found
        </td>
    </tr>
    <%
  }
  %>
  
</table>

